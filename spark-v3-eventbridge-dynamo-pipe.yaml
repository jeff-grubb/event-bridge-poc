# Names:
# dev-fs-spark-v3-eventbridge-dynamo-{table}-pipe

#######################################################
# Creates an eventbridge pipe that publishes dynamodb events to the v3 content publisher
#######################################################

AWSTemplateFormatVersion: "2010-09-09"
Description: V3 EventBridge Dynamo Pipe to Content Publisher

Parameters:
  CloudformationTemplateSource:
    Description: The Cloudformation template source in the S3 bucket
    Type: String
    Default: testing

  Environment:
    Description: Environment for deployment
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
      - poc
    Default: dev
    ConstraintDescription: Must be one of Dev, Stage, Prod, or POC.

  APIName:
    Description: The name of the business unit
    Type: String
    AllowedValues:
      - fs
      - fw
      - fb
      - fn
      - ok
    Default: fs
    ConstraintDescription: Must be a supported BU Abbreviation (fs, fw, fb, fn, ok)

  TableName:
    Description: The name of the v3 table to publish events from
    Type: String
    AllowedValues:
      - content
      - videos
    Default: content
    ConstraintDescription: "Must be a dynamo v3 table"

Resources:
  EventBridgeContentPipeIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pipes.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: DynamoDBPipeSource
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                Resource: # Todo: expand this to other dynamo db tables
                  - Fn::ImportValue:
                      'Fn::Sub': "${Environment}-${APIName}-spark-v3-${TableName}-stream-arn"

        - PolicyName: InvokePublishLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::ImportValue:
                    'Fn::Sub': "${Environment}-${APIName}-spark-v3-content-publisher-arn"

        - PolicyName: CloudWatchLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

  EventBridgeContentPipeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/${Environment}-${APIName}-spark-v3-eventbridge-dynamo-pipe"
      RetentionInDays: 7

  EventBridgeContentPipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Description: >-
        Pipe spark v3 content dynamo table stream events to the local event bus
      Name: !Sub "${Environment}-${APIName}-spark-v3-eventbridge-dynamo-pipe"
      RoleArn:
        'Fn::GetAtt':
          - EventBridgeContentPipeIAMRole
          - Arn
      Source:
        Fn::ImportValue: # Todo: expand this to other dynamo db tables?
          'Fn::Sub': "${Environment}-${APIName}-spark-v3-${TableName}-stream-arn"
      SourceParameters:
        DynamoDBStreamParameters:
          StartingPosition: LATEST
      Target:
        Fn::ImportValue:
          'Fn::Sub': "${Environment}-${APIName}-spark-v3-content-publisher-arn"

      LogConfiguration:
        Level: INFO
        CloudwatchLogsLogDestination:
          LogGroupArn:
            'Fn::GetAtt':
              - EventBridgeContentPipeLogGroup
              - Arn

  EventBridgeLambdaTriggerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::ImportValue:
          'Fn::Sub': "${Environment}-${APIName}-spark-v3-content-publisher-arn"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt
        - EventBridgeContentPipe
        - Arn
